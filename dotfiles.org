#+TITLE: DotFiles
#+STARTUP: indent content

* CommandLine
** Zsh
:PROPERTIES:
:header-args: :tangle ./.zshrc
:END:
*** Emacs tramp config
#+BEGIN_SRC sh
  [[ "$INSIDE_EMACS" == *tramp* ]] && unsetopt zle && PS1='$ ' && return
#+END_SRC

*** Powerlevel10k theme
#+BEGIN_SRC sh
  # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
  # Initialization code that may require console input (password prompts, [y/n]
  # confirmations, etc.) must go above this block; everything else may go below.
  # 瞬态显示
  # 需要放在开头位置
  if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
  fi
#+END_SRC

*** History
#+BEGIN_SRC sh
  export HISTSIZE=50000
  export SAVEHIST=10000
  export HISTFILE=$HOME/.zsh_history

  setopt EXTENDED_HISTORY       # 保存命令开始结束时间
  setopt HIST_EXPIRE_DUPS_FIRST # 历史记录过大时首先删除重复项
  setopt HIST_IGNORE_DUPS       # 忽视重复项
  setopt HIST_IGNORE_SPACE      # 忽视从空格开始的命令
  setopt HIST_VERIFY            # 历史扩展
  setopt SHARE_HISTORY          # 共享历史纪录
  setopt NO_HIST_BEEP           # 访问不存在的历史记录不发出警告声
  setopt APPEND_HISTORY         # 追加到历史纪录文件

  alias history="fc -li"
  alias history-stat="history 0 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"
#+END_SRC

*** Directory
#+BEGIN_SRC sh
  setopt AUTO_CD                  # 不用 cd 输入目录跳转
  setopt AUTO_PUSHD               # cd 旧目录推送至目录栈
  setopt PUSHD_IGNORE_DUPS        # 不存储重复项
  setopt PUSHD_MINUS
  setopt PUSHD_SILENT             # 不在 pushd 或 popd 后打印目录栈

  alias -g ...='../..'
  alias -g ....='../../..'
  alias -g .....='../../../..'
  alias -g ......='../../../../..'

  alias -- -='cd -'
  alias 1='cd -1'
  alias 2='cd -2'
  alias 3='cd -3'
  alias 4='cd -4'
  alias 5='cd -5'
  alias 6='cd -6'
  alias 7='cd -7'
  alias 8='cd -8'
  alias 9='cd -9'

  alias md='mkdir -p'
  alias rd=rmdir

  alias l="ls --color -alih"
  alias ls="ls --color "

  function d () {
    if [[ -n $1 ]]; then
      dirs "$@"
    else
      dirs -v | head -n 10
    fi
  }
#+END_SRC

*** Complete
#+BEGIN_SRC sh
  unsetopt MENU_COMPLETE   # 禁止自动选择第一个
  unsetopt FLOW_CONTROL
  setopt AUTO_MENU         # TAB按键自动选择下一个
  setopt COMPLETE_IN_WORD # 补全开始时光标不动
  setopt ALWAYS_TO_END    # 补全选择后光标跳至末尾
  setopt AUTO_LIST           # Automatically list choices on ambiguous completion.
  setopt AUTO_PARAM_SLASH    # If completed parameter is a directory, add a trailing slash.
  setopt EXTENDED_GLOB       # Needed for file modification glob modifiers with compinit

  function run-compinit {
    # Load and initialize the completion system ignoring insecure directories with a
    # cache time of 20 hours, so it should almost always regenerate the first time a
    # shell is opened each day.

    # References
    # https://github.com/sorin-ionescu/prezto/blob/master/modules/completion/init.zsh#L31-L44
    # https://github.com/sorin-ionescu/prezto/blob/master/runcoms/zlogin#L9-L15
    # http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Use-of-compinit
    # https://gist.github.com/ctechols/ca1035271ad134841284#gistcomment-2894219
    # https://htr3n.github.io/2018/07/faster-zsh/

    emulate -L zsh
    setopt local_options extended_glob

    autoload -Uz compinit
    if [[ -z "$ZSH_COMPDUMP" ]]; then
      ZSH_COMPDUMP=${XDG_CACHE_HOME:-$HOME/.cache}/zsh/zcompdump
    fi
    [[ -d "${ZSH_COMPDUMP:h}" ]] || mkdir -p "${ZSH_COMPDUMP:h}"

    # if compdump is less than 20 hours old, shortcut with `compinit -C`
    # glob magic explained:
    #   #q expands globs in conditional expressions
    #   N - sets null_glob option (no error on 0 results)
    #   mh-20 - modified less than 20 hours ago
    local comp_files=($ZSH_COMPDUMP(Nmh-20))
    if (( $#comp_files )); then
      compinit -i -C -d "$ZSH_COMPDUMP"
    else
      compinit -i -d "$ZSH_COMPDUMP"
      # keep zcompdump younger than cache time even if it isn't regenerated
      touch "$ZSH_COMPDUMP"
    fi

    # compile zcompdump, if modified, in background to increase startup speed
    {
      if [[ -s "$ZSH_COMPDUMP" && (! -s "${ZSH_COMPDUMP}.zwc" || "$ZSH_COMPDUMP" -nt "${ZSH_COMPDUMP}.zwc") ]]; then
        zcompile "$ZSH_COMPDUMP"
      fi
    } &!
  }

  zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
  zstyle ':completion:*:default' list-prompt '%S%M matches%s'

  # Use caching to make completion for commands such as dpkg and apt usable.
  zstyle ':completion::complete:*' use-cache on
  zstyle ':completion::complete:*' cache-path "${XDG_CACHE_HOME:-$HOME/.cache}/zsh/zcompcache"

  # 是否敏感匹配
  # CASE_SENSITIVE=true
  if [[ "$CASE_SENSITIVE" = true ]]; then
    zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
    setopt CASE_GLOB
  else
    zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
    unsetopt CASE_GLOB
  fi
  unset CASE_SENSITIVE

  # Group matches and describe.
  zstyle ':completion:*:*:*:*:*' menu select
  zstyle ':completion:*:matches' group 'yes'
  zstyle ':completion:*:options' description 'yes'
  zstyle ':completion:*:options' auto-description '%d'
  zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
  zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
  zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
  zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
  zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
  zstyle ':completion:*' group-name ''
  zstyle ':completion:*' verbose yes

  # Fuzzy match mistyped completions.
  zstyle ':completion:*' completer _complete _match _approximate
  zstyle ':completion:*:match:*' original only
  zstyle ':completion:*:approximate:*' max-errors 1 numeric

  # Increase the number of errors based on the length of the typed word. But make
  # sure to cap (at 7) the max-errors to avoid hanging.
  zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3>7?7:($#PREFIX+$#SUFFIX)/3))numeric)'

  # Don't complete unavailable commands.
  zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

  # Array completion element sorting.
  zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

  # Directories
  zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
  zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
  zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
  zstyle ':completion:*' squeeze-slashes true

  # History
  zstyle ':completion:*:history-words' stop yes
  zstyle ':completion:*:history-words' remove-all-dups yes
  zstyle ':completion:*:history-words' list false
  zstyle ':completion:*:history-words' menu yes

  # Environment Variables
  zstyle ':completion::*:(-command-|export):*' fake-parameters ${${${_comps[(I)-value-*]#*,}%%,*}:#-*-}


  zstyle -e ':completion:*:hosts' hosts 'reply=(
    ${=${=${=${${(f)"$(cat {/etc/ssh/ssh_,~/.ssh/}known_hosts(|2)(N) 2> /dev/null)"}%%[#| ]*}//\]:[0-9]*/ }//,/ }//\[/ }
    ${=${(f)"$(cat /etc/hosts(|)(N) <<(ypcat hosts 2> /dev/null))"}%%(\#${_etc_host_ignores:+|${(j:|:)~_etc_host_ignores}})*}
    ${=${${${${(@M)${(f)"$(cat ~/.ssh/config 2> /dev/null)"}:#Host *}#Host }:#*\**}:#*\?*}}
  )'

  # Don't complete uninteresting users...
  zstyle ':completion:*:*:*:users' ignored-patterns \
    adm amanda apache avahi beaglidx bin cacti canna clamav daemon \
    dbus distcache dovecot fax ftp games gdm gkrellmd gopher \
    hacluster haldaemon halt hsqldb ident junkbust ldap lp mail \
    mailman mailnull mldonkey mysql nagios \
    named netdump news nfsnobody nobody nscd ntp nut nx openvpn \
    operator pcap postfix postgres privoxy pulse pvm quagga radvd \
    rpc rpcuser rpm shutdown squid sshd sync uucp vcsa xfs '_*'

  # ... unless we really want to.
  zstyle '*' single-ignored show

  # Ignore multiple entries.
  zstyle ':completion:*:(rm|kill|diff):*' ignore-line other
  zstyle ':completion:*:rm:*' file-patterns '*:all-files'

  # Kill
  zstyle ':completion:*:*:*:*:processes' command 'ps -u $LOGNAME -o pid,user,command -w'
  zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;36=0=01'
  zstyle ':completion:*:*:kill:*' menu yes select
  zstyle ':completion:*:*:kill:*' force-list always
  zstyle ':completion:*:*:kill:*' insert-ids single

  # Man
  zstyle ':completion:*:manuals' separate-sections true
  zstyle ':completion:*:manuals.(^1*)' insert-sections true

  # Media Players
  zstyle ':completion:*:*:mpg123:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
  zstyle ':completion:*:*:mpg321:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
  zstyle ':completion:*:*:ogg123:*' file-patterns '*.(ogg|OGG|flac):ogg\ files *(-/):directories'
  zstyle ':completion:*:*:mocp:*' file-patterns '*.(wav|WAV|mp3|MP3|ogg|OGG|flac):ogg\ files *(-/):directories'

  # Mutt
  if [[ -s "$HOME/.mutt/aliases" ]]; then
    zstyle ':completion:*:*:mutt:*' menu yes select
    zstyle ':completion:*:mutt:*' users ${${${(f)"$(<"$HOME/.mutt/aliases")"}#alias[[:space:]]}%%[[:space:]]*}
  fi

  # SSH/SCP/RSYNC
  zstyle ':completion:*:(ssh|scp|rsync):*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
  zstyle ':completion:*:(scp|rsync):*' group-order users files all-files hosts-domain hosts-host hosts-ipaddr
  zstyle ':completion:*:ssh:*' group-order users hosts-domain hosts-host users hosts-ipaddr
  zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*(.|:)*' loopback ip6-loopback localhost ip6-localhost broadcasthost
  zstyle ':completion:*:(ssh|scp|rsync):*:hosts-domain' ignored-patterns '<->.<->.<->.<->' '^[-[:alnum:]]##(.[-[:alnum:]]##)##' '*@*'
  zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^(<->.<->.<->.<->|(|::)([[:xdigit:].]##:(#c,2))##(|%*))' '127.0.0.<->' '255.255.255.255' '::1' 'fe80::*'
  #endregion

  run-compinit
#+END_SRC

*** Editor
#+BEGIN_SRC sh
  setopt NO_BEEP
#+END_SRC

*** Plugin manager
#+BEGIN_SRC sh
  function zsh-plugin-load() {
    local repo plugin_name plugin_dir initfile initfiles
    ZPLUGINDIR=${ZPLUGINDIR:-${ZDOTDIR:-$HOME/.config/zsh}/plugins}
    for repo in $@; do
      plugin_name=${repo:t}
      plugin_dir=$ZPLUGINDIR/$plugin_name
      initfile=$plugin_dir/$plugin_name.plugin.zsh
      if [[ ! -d $plugin_dir ]]; then
        echo "Cloning $repo"
        git clone --depth 1 --recursive --shallow-submodules https://github.com/$repo $plugin_dir
      fi
      if [[ ! -e $initfile ]]; then
        initfiles=($plugin_dir/*.plugin.{z,}sh(N) $plugin_dir/*.{z,}sh{-theme,}(N))
        [[ ${#initfiles[@]} -gt 0 ]] || { echo >&2 "Plugin has no init file '$repo'." && continue }
        ln -sf "${initfiles[1]}" "$initfile"
      fi
      fpath+=$plugin_dir
      (( $+functions[zsh-defer] )) && zsh-defer . $initfile || . $initfile
    done
  }

  function zsh-plugin-update() {
    ZPLUGINDIR=${ZPLUGINDIR:-$HOME/.config/zsh/plugins}
    for d in $ZPLUGINDIR/*/.git(/); do
      echo "Updating ${d:h:t}..."
      command git -C "${d:h}" pull --ff --recurse-submodules --depth 1 --rebase --autostash
    done
  }

  function zsh-plugin-compile() {
    ZPLUGINDIR=${ZPLUGINDIR:-${ZDOTDIR:-$HOME/.config/zsh}/plugins}
    autoload -U zrecompile
    local f
    for f in $ZPLUGINDIR/**/*.zsh{,-theme}(N); do
      zrecompile -pq "$f"
    done
  }

  function zsh-plugin-list() {
    echo $zsh_plugin_repos
  }

#+END_SRC

*** Plugin install
#+BEGIN_SRC sh
  zsh_plugin_repos=(
    zsh-users/zsh-history-substring-search
    zsh-users/zsh-autosuggestions
    romkatv/powerlevel10k
  )

  zsh-plugin-load $zsh_plugin_repos

#+END_SRC

*** Plugin config
**** zsh-users/zsh-autosuggestions
#+BEGIN_SRC sh
  # 接受建议按键
  ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=(
    end-of-line
    vi-forward-char
    vi-end-of-line
    vi-add-eol
  )
  # 接受部分建议按键
  ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=(
    forward-char
    forward-word
    emacs-forward-word
    vi-forward-word
    vi-forward-word-end
    vi-forward-blank-word
    vi-forward-blank-word-end
    vi-find-next-char
    vi-find-next-char-skip
  )
#+END_SRC

*** Tools config
#+BEGIN_SRC sh
  export ZSH_REQUIRE_COMMAND_TOOLS="fzf zoxide"
#+END_SRC
**** fzf
#+BEGIN_SRC sh
  if [[ -x "$(command -v fzf)" ]]; then
    export FZF_DEFAULT_COMMAND='fd --type f'

    export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'

    function pai() {
      pacman -Slq | fzf -q "$1" -m --preview-window hidden --bind 'alt-.:preview(pacman -Si {}),alt-n:preview-down,alt-p:preview-up' | xargs -ro sudo pacman -S
    }

    function par() {
      pacman -Qq | fzf -q "$1" -m --preview-window hidden --bind 'alt-.:preview(pacman -Qi {}),alt-n:preview-down,alt-p:preview-up' | xargs -ro sudo pacman -Rscn
    }

    function docker-stop-fzf() {
      local cid
      cid=$(docker ps -a | sed 1d | fzf -q "$1" | awk '{pring $1}')
      [ -n "$cid" ] && docker stop "$cid"
    }

    FZF_CTRL_T_COMMAND=""
    FZF_ALT_C_COMMAND=""
    eval "$(fzf --zsh)"
  fi
#+END_SRC
**** zoxide
#+BEGIN_SRC conf
  if [[ -x "$(command -v zoxide)" ]]; then
     eval "$(zoxide init zsh --cmd j)"
  fi
#+END_SRC

*** Keybind
#+begin_src sh
  bindkey -e
  bindkey -M emacs '^[p' history-substring-search-up
  bindkey -M emacs '^[n' history-substring-search-down
  bindkey "^[[3~" delete-char
#+end_src

*** All alias
#+BEGIN_SRC sh
#+END_SRC

*** Wsl config
#+BEGIN_SRC sh
  if [ -e "/mnt/wsl" ];  then
    export PROXY_ADDRESS="http://$(ip route | awk '{print $3;exit}'):40003"
    export BROWSER="/mnt/c/Windows/explorer.exe "
    alias open="/mnt/c/Windows/explorer.exe "
  fi
#+END_SRC

*** Utils
#+BEGIN_SRC sh
  function check_com () {
      emulate -L zsh
      local -i comonly gatoo
      comonly=0
      gatoo=0

      if [[ $1 == '-c' ]] ; then
          comonly=1
          shift 1
      elif [[ $1 == '-g' ]] ; then
          gatoo=1
          shift 1
      fi

      if (( ${#argv} != 1 )) ; then
          printf 'usage: check_com [-c|-g] <command>\n' >&2
          return 1
      fi

      if (( comonly > 0 )) ; then
          (( ${+commands[$1]}  )) && return 0
          return 1
      fi

      if     (( ${+commands[$1]}    )) \
          || (( ${+functions[$1]}   )) \
          || (( ${+aliases[$1]}     )) \
          || (( ${+reswords[(r)$1]} )) ; then
          return 0
      fi

      if (( gatoo > 0 )) && (( ${+galiases[$1]} )) ; then
          return 0
      fi

      return 1
  }

  function simple-extract () {
      emulate -L zsh
      setopt extended_glob noclobber
      local ARCHIVE DELETE_ORIGINAL DECOMP_CMD USES_STDIN USES_STDOUT GZTARGET WGET_CMD
      local RC=0
      zparseopts -D -E "d=DELETE_ORIGINAL"
      for ARCHIVE in "${@}"; do
          case $ARCHIVE in
              ,*(tar.bz2|tbz2|tbz))
                  DECOMP_CMD="tar -xvjf -"
                  USES_STDIN=true
                  USES_STDOUT=false
                  ;;
              ,*(tar.gz|tgz))
                  DECOMP_CMD="tar -xvzf -"
                  USES_STDIN=true
                  USES_STDOUT=false
                  ;;
              ,*(tar.xz|txz|tar.lzma))
                  DECOMP_CMD="tar -xvJf -"
                  USES_STDIN=true
                  USES_STDOUT=false
                  ;;
              ,*tar.zst)
                  DECOMP_CMD="tar --zstd -xvf -"
                  USES_STDIN=true
                  USES_STDOUT=false
                  ;;
              ,*tar.lrz)
                  DECOMP_CMD="lrzuntar"
                  USES_STDIN=false
                  USES_STDOUT=false
                  ;;
              ,*tar)
                  DECOMP_CMD="tar -xvf -"
                  USES_STDIN=true
                  USES_STDOUT=false
                  ;;
              ,*rar)
                  DECOMP_CMD="unrar x"
                  USES_STDIN=false
                  USES_STDOUT=false
                  ;;
              ,*lzh)
                  DECOMP_CMD="lha x"
                  USES_STDIN=false
                  USES_STDOUT=false
                  ;;
              ,*7z)
                  DECOMP_CMD="7z x"
                  USES_STDIN=false
                  USES_STDOUT=false
                  ;;
              ,*(zip|jar))
                  DECOMP_CMD="unzip"
                  USES_STDIN=false
                  USES_STDOUT=false
                  ;;
              ,*deb)
                  DECOMP_CMD="ar -x"
                  USES_STDIN=false
                  USES_STDOUT=false
                  ;;
              ,*bz2)
                  DECOMP_CMD="bzip2 -d -c -"
                  USES_STDIN=true
                  USES_STDOUT=true
                  ;;
              ,*(gz|Z))
                  DECOMP_CMD="gzip -d -c -"
                  USES_STDIN=true
                  USES_STDOUT=true
                  ;;
              ,*(xz|lzma))
                  DECOMP_CMD="xz -d -c -"
                  USES_STDIN=true
                  USES_STDOUT=true
                  ;;
              ,*zst)
                  DECOMP_CMD="zstd -d -c -"
                  USES_STDIN=true
                  USES_STDOUT=true
                  ;;
              ,*lrz)
                  DECOMP_CMD="lrunzip -"
                  USES_STDIN=true
                  USES_STDOUT=true
                  ;;
              ,*)
                  print "ERROR: '$ARCHIVE' has unrecognized archive type." >&2
                  RC=$((RC+1))
                  continue
                  ;;
          esac

          if ! check_com ${DECOMP_CMD[(w)1]}; then
              echo "ERROR: ${DECOMP_CMD[(w)1]} not installed." >&2
              RC=$((RC+2))
              continue
          fi

          GZTARGET="${ARCHIVE:t:r}"
          if [[ -f $ARCHIVE ]] ; then

              print "Extracting '$ARCHIVE' ..."
              if $USES_STDIN; then
                  if $USES_STDOUT; then
                      ${=DECOMP_CMD} < "$ARCHIVE" > $GZTARGET
                  else
                      ${=DECOMP_CMD} < "$ARCHIVE"
                  fi
              else
                  if $USES_STDOUT; then
                      ${=DECOMP_CMD} "$ARCHIVE" > $GZTARGET
                  else
                      ${=DECOMP_CMD} "$ARCHIVE"
                  fi
              fi
              [[ $? -eq 0 && -n "$DELETE_ORIGINAL" ]] && rm -f "$ARCHIVE"

          elif [[ "$ARCHIVE" == (#s)(https|http|ftp)://* ]] ; then
              if check_com curl; then
                  WGET_CMD="curl -L -s -o -"
              elif check_com wget; then
                  WGET_CMD="wget -q -O -"
              elif check_com fetch; then
                  WGET_CMD="fetch -q -o -"
              else
                  print "ERROR: neither wget, curl nor fetch is installed" >&2
                  RC=$((RC+4))
                  continue
              fi
              print "Downloading and Extracting '$ARCHIVE' ..."
              if $USES_STDIN; then
                  if $USES_STDOUT; then
                      ${=WGET_CMD} "$ARCHIVE" | ${=DECOMP_CMD} > $GZTARGET
                      RC=$((RC+$?))
                  else
                      ${=WGET_CMD} "$ARCHIVE" | ${=DECOMP_CMD}
                      RC=$((RC+$?))
                  fi
              else
                  if $USES_STDOUT; then
                      ${=DECOMP_CMD} =(${=WGET_CMD} "$ARCHIVE") > $GZTARGET
                  else
                      ${=DECOMP_CMD} =(${=WGET_CMD} "$ARCHIVE")
                  fi
              fi

          else
              print "ERROR: '$ARCHIVE' is neither a valid file nor a supported URI." >&2
              RC=$((RC+8))
          fi
      done
      return $RC
  }
#+END_SRC

*** Powerlevel10k config
#+BEGIN_SRC sh
  # Generated by Powerlevel10k configuration wizard on 2022-09-07 at 23:28 CST.
  # Based on romkatv/powerlevel10k/config/p10k-pure.zsh.
  # Wizard options: nerdfont-complete + powerline, small icons, pure, 24h time, 2 lines,
  # sparse, transient_prompt, instant_prompt=verbose.
  # Type `p10k configure` to generate another config.
  #
  # Config file for Powerlevel10k with the style of Pure (https://github.com/sindresorhus/pure).
  #
  # Differences from Pure:
  #
  #   - Git:
  #     - `@c4d3ec2c` instead of something like `v1.4.0~11` when in detached HEAD state.
  #     - No automatic `git fetch` (the same as in Pure with `PURE_GIT_PULL=0`).
  #
  # Apart from the differences listed above, the replication of Pure prompt is exact. This includes
  # even the questionable parts. For example, just like in Pure, there is no indication of Git status
  # being stale; prompt symbol is the same in command, visual and overwrite vi modes; when prompt
  # doesn't fit on one line, it wraps around with no attempt to shorten it.
  #
  # If you like the general style of Pure but not particularly attached to all its quirks, type
  # `p10k configure` and pick "Lean" style. This will give you slick minimalist prompt while taking
  # advantage of Powerlevel10k features that aren't present in Pure.

  # Temporarily change options.
  'builtin' 'local' '-a' 'p10k_config_opts'
  [[ ! -o 'aliases'         ]] || p10k_config_opts+=('aliases')
  [[ ! -o 'sh_glob'         ]] || p10k_config_opts+=('sh_glob')
  [[ ! -o 'no_brace_expand' ]] || p10k_config_opts+=('no_brace_expand')
  'builtin' 'setopt' 'no_aliases' 'no_sh_glob' 'brace_expand'

  () {
    emulate -L zsh -o extended_glob

    # Unset all configuration options.
    unset -m '(POWERLEVEL9K_*|DEFAULT_USER)~POWERLEVEL9K_GITSTATUS_DIR'

    # Zsh >= 5.1 is required.
    autoload -Uz is-at-least && is-at-least 5.1 || return

    # Prompt colors.
    local grey='242'
    local red='1'
    local yellow='3'
    local blue='4'
    local magenta='5'
    local cyan='6'
    local white='7'

    # Left prompt segments.
    typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
      # =========================[ Line #1 ]=========================
      context                   # user@host
      dir                       # current directory
      vcs                       # git status
      command_execution_time    # previous command duration
      # =========================[ Line #2 ]=========================
      newline                   # \n
      virtualenv                # python virtual environment
      prompt_char               # prompt symbol
    )

    # Right prompt segments.
    typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
      # =========================[ Line #1 ]=========================
      # command_execution_time  # previous command duration
      # virtualenv              # python virtual environment
      # context                 # user@host
      time                      # current time
      # =========================[ Line #2 ]=========================
      newline                   # \n
    )

    # Basic style options that define the overall prompt look.
    typeset -g POWERLEVEL9K_BACKGROUND=                            # transparent background
    typeset -g POWERLEVEL9K_{LEFT,RIGHT}_{LEFT,RIGHT}_WHITESPACE=  # no surrounding whitespace
    typeset -g POWERLEVEL9K_{LEFT,RIGHT}_SUBSEGMENT_SEPARATOR=' '  # separate segments with a space
    typeset -g POWERLEVEL9K_{LEFT,RIGHT}_SEGMENT_SEPARATOR=        # no end-of-line symbol
    typeset -g POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION=           # no segment icons

    # Add an empty line before each prompt except the first. This doesn't emulate the bug
    # in Pure that makes prompt drift down whenever you use the Alt-C binding from fzf or similar.
    typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=true

    # Magenta prompt symbol if the last command succeeded.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_{VIINS,VICMD,VIVIS}_FOREGROUND=$magenta
    # Red prompt symbol if the last command failed.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_{VIINS,VICMD,VIVIS}_FOREGROUND=$red
    # Default prompt symbol.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIINS_CONTENT_EXPANSION='❯'
    # Prompt symbol in command vi mode.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VICMD_CONTENT_EXPANSION='❮'
    # Prompt symbol in visual vi mode is the same as in command mode.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIVIS_CONTENT_EXPANSION='❮'
    # Prompt symbol in overwrite vi mode is the same as in command mode.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_OVERWRITE_STATE=false

    # Grey Python Virtual Environment.
    typeset -g POWERLEVEL9K_VIRTUALENV_FOREGROUND=$grey
    # Don't show Python version.
    typeset -g POWERLEVEL9K_VIRTUALENV_SHOW_PYTHON_VERSION=false
    typeset -g POWERLEVEL9K_VIRTUALENV_{LEFT,RIGHT}_DELIMITER=

    # Blue current directory.
    typeset -g POWERLEVEL9K_DIR_FOREGROUND=$blue

    # Context format when root: user@host. The first part white, the rest grey.
    typeset -g POWERLEVEL9K_CONTEXT_ROOT_TEMPLATE="%F{$white}%n%f%F{$grey}@%m%f"
    # Context format when not root: user@host. The whole thing grey.
    typeset -g POWERLEVEL9K_CONTEXT_TEMPLATE="%F{$grey}%n@%m%f"
    # Don't show context unless root or in SSH.
    typeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_CONTENT_EXPANSION=

    # Show previous command duration only if it's >= 5s.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=5
    # Don't show fractional seconds. Thus, 7s rather than 7.3s.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION=0
    # Duration format: 1d 2h 3m 4s.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FORMAT='d h m s'
    # Yellow previous command duration.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=$yellow

    # Grey Git prompt. This makes stale prompts indistinguishable from up-to-date ones.
    typeset -g POWERLEVEL9K_VCS_FOREGROUND=$grey

    # Disable async loading indicator to make directories that aren't Git repositories
    # indistinguishable from large Git repositories without known state.
    typeset -g POWERLEVEL9K_VCS_LOADING_TEXT=

    # Don't wait for Git status even for a millisecond, so that prompt always updates
    # asynchronously when Git state changes.
    typeset -g POWERLEVEL9K_VCS_MAX_SYNC_LATENCY_SECONDS=0

    # Cyan ahead/behind arrows.
    typeset -g POWERLEVEL9K_VCS_{INCOMING,OUTGOING}_CHANGESFORMAT_FOREGROUND=$cyan
    # Don't show remote branch, current tag or stashes.
    typeset -g POWERLEVEL9K_VCS_GIT_HOOKS=(vcs-detect-changes git-untracked git-aheadbehind)
    # Don't show the branch icon.
    typeset -g POWERLEVEL9K_VCS_BRANCH_ICON=
    # When in detached HEAD state, show @commit where branch normally goes.
    typeset -g POWERLEVEL9K_VCS_COMMIT_ICON='@'
    # Don't show staged, unstaged, untracked indicators.
    typeset -g POWERLEVEL9K_VCS_{STAGED,UNSTAGED,UNTRACKED}_ICON=
    # Show '*' when there are staged, unstaged or untracked files.
    typeset -g POWERLEVEL9K_VCS_DIRTY_ICON='*'
    # Show '⇣' if local branch is behind remote.
    typeset -g POWERLEVEL9K_VCS_INCOMING_CHANGES_ICON=':⇣'
    # Show '⇡' if local branch is ahead of remote.
    typeset -g POWERLEVEL9K_VCS_OUTGOING_CHANGES_ICON=':⇡'
    # Don't show the number of commits next to the ahead/behind arrows.
    typeset -g POWERLEVEL9K_VCS_{COMMITS_AHEAD,COMMITS_BEHIND}_MAX_NUM=1
    # Remove space between '⇣' and '⇡' and all trailing spaces.
    typeset -g POWERLEVEL9K_VCS_CONTENT_EXPANSION='${${${P9K_CONTENT/⇣* :⇡/⇣⇡}// }//:/ }'

    # Grey current time.
    typeset -g POWERLEVEL9K_TIME_FOREGROUND=$grey
    # Format for the current time: 09:51:02. See `man 3 strftime`.
    typeset -g POWERLEVEL9K_TIME_FORMAT='%D{%H:%M:%S}'
    # If set to true, time will update when you hit enter. This way prompts for the past
    # commands will contain the start times of their commands rather than the end times of
    # their preceding commands.
    typeset -g POWERLEVEL9K_TIME_UPDATE_ON_COMMAND=false

    # Transient prompt works similarly to the builtin transient_rprompt option. It trims down prompt
    # when accepting a command line. Supported values:
    #
    #   - off:      Don't change prompt when accepting a command line.
    #   - always:   Trim down prompt when accepting a command line.
    #   - same-dir: Trim down prompt when accepting a command line unless this is the first command
    #               typed after changing current working directory.
    typeset -g POWERLEVEL9K_TRANSIENT_PROMPT=always

    # Instant prompt mode.
    #
    #   - off:     Disable instant prompt. Choose this if you've tried instant prompt and found
    #              it incompatible with your zsh configuration files.
    #   - quiet:   Enable instant prompt and don't print warnings when detecting console output
    #              during zsh initialization. Choose this if you've read and understood
    #              https://github.com/romkatv/powerlevel10k/blob/master/README.md#instant-prompt.
    #   - verbose: Enable instant prompt and print a warning when detecting console output during
    #              zsh initialization. Choose this if you've never tried instant prompt, haven't
    #              seen the warning, or if you are unsure what this all means.
    typeset -g POWERLEVEL9K_INSTANT_PROMPT=verbose

    # Hot reload allows you to change POWERLEVEL9K options after Powerlevel10k has been initialized.
    # For example, you can type POWERLEVEL9K_BACKGROUND=red and see your prompt turn red. Hot reload
    # can slow down prompt by 1-2 milliseconds, so it's better to keep it turned off unless you
    # really need it.
    typeset -g POWERLEVEL9K_DISABLE_HOT_RELOAD=true

    # If p10k is already loaded, reload configuration.
    # This works even with POWERLEVEL9K_DISABLE_HOT_RELOAD=true.
    (( ! $+functions[p10k] )) || p10k reload
  }

  # Tell `p10k configure` which file it should overwrite.
  typeset -g POWERLEVEL9K_CONFIG_FILE=${${(%):-%x}:a}

  (( ${#p10k_config_opts} )) && setopt ${p10k_config_opts[@]}
  'builtin' 'unset' 'p10k_config_opts'
#+END_SRC

*** Emacs vterm config
#+BEGIN_SRC sh
  if [[ "$INSIDE_EMACS" = 'vterm' ]]; then
    function vterm_printf(){
      if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
      elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
      else
        printf "\e]%s\e\\" "$1"
      fi
    }
    function vterm_prompt_end() {
      vterm_printf "51;A$(whoami)@$(cat /etc/hostname):$(pwd)";
    }

    # setopt PROMPT_SUBST
    # PROMPT=$PROMPT'%{$(vterm_prompt_end)%}'

    function vterm_cmd() {
      local vterm_elisp
      vterm_elisp=""
      while [ $# -gt 0 ]; do
        vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
        shift
      done
      vterm_printf "51;E$vterm_elisp"
    }

    function find_file() {
      vterm_cmd find-file "$(realpath "${@:-.}")"
    }

    alias e="find_file"
  fi
#+END_SRC

*** Emacs Alias
#+BEGIN_SRC sh
  function emacs_sudo_open() {
    if [ -z "$1" ]; then
      filename="."
    else
      filename="$1"
    fi

    emacsclient -t -e "(find-file \"/sudo:root@localhost:$filename\")"
  }
  alias em="emacsclient -c "
  alias e="emacsclient -nw -c "
  alias emr="emacsclient -r "
  alias sudoe=emacs_sudo_open
#+END_SRC

*** Word Match
#+BEGIN_SRC sh
  export WORDCHARS=''
#+END_SRC

*** Environment
#+BEGIN_SRC sh
  if [ -f ~/.environment ]; then
    source ~/.environment
  fi
#+END_SRC

*** Proxy config
#+BEGIN_SRC sh
  function setproxy() {
    export http_proxy=$PROXY_ADDRESS
    export https_proxy=$PROXY_ADDRESS
  }

  function unsetproxy() {
    unset http_proxy
    unset https_proxy
  }

  function gitsetproxy() {
    git config --global http.proxy $PROXY_ADDRESS
    git config --global https.proxy $PROXY_ADDRESS
  }

  function gitunsetproxy() {
    git config --global --unset http.proxy
    git config --global --unset https.proxy
  }

#+END_SRC

** Zellij
:PROPERTIES:
:header-args: :tangle ./.config/zellij/config.kdl :mkdirp yes
:END:

#+BEGIN_SRC conf
  on_force_close "quit"
  simplified_ui true
  themes {
     dracula {
          fg 248 248 242
          bg 40 42 54
          black 0 0 0
          red 255 85 85
          green 80 250 123
          yellow 241 250 140
          blue 98 114 164
          magenta 255 121 198
          cyan 139 233 253
          white 255 255 255
          orange 255 184 108
      }
  }
  theme "dracula"
  default_layout "compact"
  default_mode "locked"
  mouse_mode false
  pane_frames false
  keybinds {
      normal clear-defaults=true {
          unbind "Ctrl g"

          bind "," { SwitchToMode "pane"; }
          bind "Alt h" { MoveFocus "Left"; }
          bind "Alt l" { MoveFocus "Right"; }
          bind "Alt j" { MoveFocus "Down"; }
          bind "Alt k" { MoveFocus "Up"; }
          bind "Alt H" { MovePane "Left"; }
          bind "Alt L" { MovePane "Right"; }
          bind "Alt J" { MovePane "Down"; }
          bind "Alt K" { MovePane "Up"; }
          bind "o" { FocusNextPane; }
          bind "O" { FocusPreviousPane; }
          bind "w" { ToggleFloatingPanes; }
          bind "W" { ToggleFloatingPanes; }
          bind "F" { ToggleFocusFullscreen; }

          bind "Ctrl Q" { Detach; }
          bind "Ctrl S" { DumpScreen "~/zellij-dump.txt"; }
          bind "Ctrl E" { EditScrollback; }

          bind "j" { ScrollDown; }
          bind "k" { ScrollUp; }
          bind "G" { ScrollToBottom; }
          bind "d" { HalfPageScrollDown; }
          bind "u" { HalfPageScrollUp; }
          bind "Ctrl d" { HalfPageScrollDown; }
          bind "Ctrl u" { HalfPageScrollUp; }
          bind "f" { PageScrollDown; }
          bind "b" { PageScrollUp; }
          bind "Ctrl f" { PageScrollDown; }
          bind "Ctrl b" { PageScrollUp; }
          bind "n" { Search "down"; }
          bind "N" { Search "up";}

          bind "i" { SwitchToMode "locked"; }
          bind "a" { SwitchToMode "locked"; }

          bind "Tab" { SwitchToMode "tab"; }
          bind "t" { SwitchToMode "tab"; }

          bind "Ctrl m" { ToggleMouseMode; }
      }

      pane clear-default=true {
          bind "v" { NewPane "Right"; SwitchToMode "normal"; }
          bind "s" { NewPane "Down"; SwitchToMode "normal"; }
          bind "d" { CloseFocus; SwitchToMode "normal"; }
          bind "h" { MoveFocus "Left"; }
          bind "l" { MoveFocus "Right"; }
          bind "j" { MoveFocus "Down"; }
          bind "k" { MoveFocus "Up"; }
          bind "H" { MovePane "Left"; }
          bind "L" { MovePane "Right"; }
          bind "J" { MovePane "Down"; }
          bind "K" { MovePane "Up"; }
          bind "Alt h" { Resize "Left"; }
          bind "Alt l" { Resize "Right"; }
          bind "Alt j" { Resize "Down"; }
          bind "Alt k" { Resize "Up"; }
          bind "Ctrl =" { Resize "Increase"; }
          bind "Ctrl -" { Resize "Decrease"; }
          bind "w" { ToggleFloatingPanes; SwitchToMode "normal"; }
          bind "f" { ToggleFocusFullscreen; SwitchToMode "normal"; }
          bind "F" { TogglePaneFrames; }
          bind "r" { SwitchToMode "renamepane"; }
      }

      renamepane {
          bind "Ctrl g" { UndoRenamePane; SwitchToMode "pane"; }
      }

      tab clear-default=true {
          bind "d" { CloseTab; SwitchToMode "normal"; }
          bind "Tab" { GoToNextTab; }
          bind "n" { GoToNextTab; SwitchToMode "normal"; }
          bind "p" { GoToPreviousTab; SwitchToMode "normal"; }
          bind "c" { NewTab; }
          bind "r" { SwitchToMode "renametab";}
          bind "1" { GoToTab 1; SwitchToMode "normal"; }
          bind "2" { GoToTab 2; SwitchToMode "normal"; }
          bind "3" { GoToTab 3; SwitchToMode "normal"; }
          bind "4" { GoToTab 4; SwitchToMode "normal"; }
          bind "5" { GoToTab 5; SwitchToMode "normal"; }
          bind "6" { GoToTab 6; SwitchToMode "normal"; }
          bind "7" { GoToTab 7; SwitchToMode "normal"; }
          bind "8" { GoToTab 8; SwitchToMode "normal"; }
          bind "9" { GoToTab 9; SwitchToMode "normal"; }
      }

      renametab {
          bind "Ctrl g" { UndoRenameTab; SwitchToMode "tab"; }
      }

      locked clear-defaults=true {
          bind "Alt g" { SwitchToMode "normal"; }
      }


      shared_except "locked" "renametab" "renamepane" {
          bind "i" { SwitchToMode "locked"; }
          bind "a" { SwitchToMode "locked"; }
          bind "Ctrl g" { SwitchToMode "normal"; }
      }
  }
#+END_SRC

** Tools
- [[https://github.com/ajeetdsouza/zoxide][zoxide]]
  cd替代工具，智能跳转目录
- [[https://github.com/sharkdp/fd][fd]]
  find 替代品
- [[https://github.com/aristocratos/btop][btop]]
  top 替代品
- [[https://github.com/BurntSushi/ripgrep][ripgrep]]
  更快的文本搜索工具
- [[https://github.com/ogham/exa][exa]]
  更优雅的文件信息显示工具, ls 替代品
- [[https://github.com/sharkdp/bat][bat]]
  语法高亮显示文本, cd 替代品
- [[https://github.com/tldr-pages/tldr][tldr]]
  社区维护的命令例子集合, python 编写, 可 pip install, 网页版 -> https://tldr.ostera.io
- [[https://github.com/nvbn/thefuck][thefuck]]
  命令纠正工具, python编写, 可 pip install
- [[https://github.com/zellij-org/zellij][zellij]]
  Zellij 是一个针对开发者、面向操作人员和任何热爱终端的人的工作空间。
  在它的核心，它是一个终端多路复用器（类似于tmux和screen），但这仅仅是它的基础设施层。

* Editor
** [[file:.emacs.d/EmacsConfig.org][Emacs]]
** Vim
:PROPERTIES:
:header-args: :tangle ./.vimrc
:END:

没用任何插件，只是一些基本的配置
*** 核心配置
#+BEGIN_SRC conf
  """=>全局配置<="""
  """""""""""""""""""""""""""""""""""
  "关闭vi兼容模式"
  set nocompatible
  "设置历史记录步数"
  set history=1000
  "开启相关插件"
  "侦测文件类型"
  filetype on
  "载入文件类型插件"
  filetype plugin on
  "为特定文件类型载入相关缩进文件"
  filetype indent on
  "当文件在外部被修改时，自动更新该文件"
  set autoread
  "激活鼠标的使用"
  set mouse=a
  set selection=exclusive
  set selectmode=mouse,key
  "保存全局变量"
  set viminfo+=!
  "带有如下符号的单词不要被换行分割"
  set iskeyword+=_,$,@,%,#,-
  "通过使用: commands命令，告诉我们文件的哪一行被改变过"
  set report=0
  "被分割的窗口间显示空白，便于阅读"
  set fillchars=vert:\ ,stl:\ ,stlnc:\
  """""""""""""""""""""""""""""""""
  """=>字体和颜色<="""
  """""""""""""""""""""""""""""""""
  "自动开启语法高亮"
  syntax enable
  "设置字体"
  "set guifont=dejaVu\ Sans\ MONO\ 10
  set guifont=Courier_New:h10:cANSI
  "设置颜色"
  "colorscheme desert
  "高亮显示当前行"
  set cursorline
  hi cursorline guibg=#00ff00
  hi CursorColumn guibg=#00ff00
  "高亮显示普通txt文件（需要txt.vim脚本）"
  au BufRead,BufNewFile *  setfiletype txt
  """""""""""""""""""""""""""""""
  """=>代码折叠功能<="""
  """""""""""""""""""""""""""""""
  "激活折叠功能"
  set foldenable
  "set nofen（这个是关闭折叠功能）"
  "设置按照语法方式折叠（可简写set fdm=XX）"
  "有6种折叠方法：
  "manual   手工定义折叠"
  "indent   更多的缩进表示更高级别的折叠"
  "expr     用表达式来定义折叠"
  "syntax   用语法高亮来定义折叠"
  "diff     对没有更改的文本进行折叠"
  "marker   对文中的标志进行折叠"
  set foldmethod=manual
  "set fdl=0（这个是不选用任何折叠方法）"
  "设置折叠区域的宽度"
  "如果不为0，则在屏幕左侧显示一个折叠标识列
  "分别用“-”和“+”来表示打开和关闭的折叠
  set foldcolumn=0
  "设置折叠层数为3"
  setlocal foldlevel=3
  "设置为自动关闭折叠"
  set foldclose=all
  "用空格键来代替zo和zc快捷键实现开关折叠"
  "zo O-pen a fold (打开折叠)
  "zc C-lose a fold (关闭折叠)
  "zf F-old creation (创建折叠)
  "nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
  """""""""""""""""""""""""""""""""""
  """=>文字处理<="""
  """""""""""""""""""""""""""""""""""
  "使用空格来替换Tab"
  set expandtab
  "设置所有的Tab和缩进为4个空格"
  set tabstop=4
  "设定<<和>>命令移动时的宽度为4"
  set shiftwidth=4
  "使得按退格键时可以一次删除4个空格"
  set softtabstop=4
  set smarttab
  "缩进，自动缩进（继承前一行的缩进）"
  "set autoindent 命令打开自动缩进，是下面配置的缩写
  "可使用autoindent命令的简写，即“:set ai”和“:set noai”
  "还可以使用“:set ai sw=4”在一个命令中打开缩进并设置缩进级别
  set ai
  set cindent
  "智能缩进"
  set si
  "自动换行”
  set wrap
  "设置软宽度"
  set sw=4
  "行内替换"
  set gdefault
  """"""""""""""""""""""""""""""""""
  """=>Vim 界面<="""
  """"""""""""""""""""""""""""""""""
  "增强模式中的命令行自动完成操作"
  set wildmenu
  "显示标尺"
  set ruler
  "设置命令行的高度"
  set cmdheight=1
  "显示行数"
  set nu
  "不要图形按钮"
  set go=
  "在执行宏命令时，不进行显示重绘；在宏命令执行完成后，一次性重绘，以便提高性能"
  set lz
  "使回格键（backspace）正常处理indent, eol, start等"
  set backspace=eol,start,indent
  "允许空格键和光标键跨越行边界"
  set whichwrap+=<,>,h,l
  "设置魔术"
  set magic
  "关闭遇到错误时的声音提示"
  "关闭错误信息响铃"
  set noerrorbells
  "关闭使用可视响铃代替呼叫"
  set novisualbell
  "高亮显示匹配的括号([{和}])"
  set showmatch
  "匹配括号高亮的时间（单位是十分之一秒）"
  set mat=2
  "光标移动到buffer的顶部和底部时保持3行距离"
  set scrolloff=3
  "搜索逐字符高亮"
  set hlsearch
  set incsearch
  "搜索时不区分大小写"
  "还可以使用简写（“:set ic”和“:set noic”）"
  set ignorecase
  "用浅色高亮显示当前行"
  autocmd InsertLeave * se nocul
  autocmd InsertEnter * se cul
  "输入的命令显示出来，看的清楚"
  set showcmd
  """"""""""""""""""""""""""""""""""""
  """=>编码设置<="""
  """"""""""""""""""""""""""""""""""""
  "设置编码"
  set encoding=utf-8
  set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
  "设置文件编码"
  set fileencodings=utf-8
  "设置终端编码"
  set termencoding=utf-8
  "设置语言编码"
  set langmenu=zh_CN.UTF-8
  set helplang=cn
  """""""""""""""""""""""""""""
  """=>其他设置<="""
  """""""""""""""""""""""""""""
  "开启新行时使用智能自动缩进"
  set smartindent
  set cin
  set showmatch
  "在处理未保存或只读文件的时候，弹出确认"
  set confirm
  "隐藏工具栏"
  set guioptions-=T
  "隐藏菜单栏"
  set guioptions-=m
  "置空错误铃声的终端代码"
  set vb t_vb=
  "显示状态栏（默认值为1，表示无法显示状态栏）"
  set laststatus=2
  "状态行显示的内容"
  set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
  "粘贴不换行问题的解决方法"
  set pastetoggle=<F9>
  "设置背景颜色"
  set background=dark
  "文件类型自动检测，代码智能补全"
  set completeopt=longest,preview,menu
  "共享剪切板"
  set clipboard+=unnamed
  "从不备份"
  set nobackup
  set noswapfile
  "自动保存"
  set autowrite
  "显示中文帮助"
  if version >= 603
          set helplang=cn
              set encoding=utf-8
  endif
  "设置高亮相关项"
  highlight Search ctermbg=black ctermfg=white guifg=white guibg=black
#+END_SRC

*** Keymap
#+begin_src conf
  imap jk <Esc>
  nmap <C-W>, <C-W>w
  nmap , <C-W>
#+end_src

* Dotfile Install
:PROPERTIES:
:header-args: :tangle ./install.sh :shebang #!/bin/sh
:END:

所有配置文件采用软链接形式安装
** init
#+BEGIN_SRC sh
  DOTFILES_DIR=$(dirname $0)
#+END_SRC

** zsh
#+BEGIN_SRC sh
  ln -sf $DOTFILES_DIR/.zshrc ~/.zshrc
#+END_SRC

** vim
#+BEGIN_SRC sh
  ln -sf $DOTFILES_DIR/.vimrc ~/.vimrc
#+END_SRC

** zellij
#+BEGIN_SRC sh
  if [ ! -d ~/.config/zellij ]; then
    mkdir -p ~/.config/zellij
  fi
  ln -sf $DOTFILES_DIR/.config/zellij/config.kdl ~/.config/zellij/config.kdl
#+END_SRC
